loess_wrapper_extrapolate <- function (x, y, span.vals = seq(0.1, 1, by = 0.05), folds = 5){
# Do model selection using mean absolute error, which is more robust than squared error.
mean.abs.error <- numeric(length(span.vals))
# Quantify error for each span, using CV
loess.model <- function(x, y, span){
loess(y ~ x, span = span, control=loess.control(surface="direct"))
}
loess.predict <- function(fit, newdata) {
predict(fit, newdata = newdata)
}
span.index <- 0
for (each.span in span.vals) {
span.index <- span.index + 1
y.hat.cv <- crossval(x, y, theta.fit = loess.model, theta.predict = loess.predict, span = each.span, ngroup = folds)$cv.fit
non.empty.indices <- !is.na(y.hat.cv)
mean.abs.error[span.index] <- mean(abs(y[non.empty.indices] - y.hat.cv[non.empty.indices]))
}
# find the span which minimizes error
best.span <- span.vals[which.min(mean.abs.error)]
# fit and return the best model
best.model <- loess(y ~ x, span = best.span, control=loess.control(surface="direct"))
print(paste0("Best span = ", best.span))
return(best.model)
}
model.cv <- loess_wrapper_extrapolate(discrim_df$year,discrim_df$discrim)
discrim_df$smooth <- model.cv$fitted
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
ctrl
#qda_fit <- qda(is_female ~ f1 + f2 + f3 + f4, train)
#pred <- predict(qda_fit, test)
#accuracy <- mean(pred$class == test$is_female)
ctrl <- trainControl(method = "cv",
p = 1,
number = 5
)
mod <- train(is_female ~ f1+f2+f3+f4,
data = sub,
method = "rf",
trControl = ctrl)
mod
max(mod$results$Accuracy)
train
test
nrow(train)
nrow(test)
,pd
mod
df <- subset(df, year >= 1930)
years <- unique(df$year)
# How confusible are the two genders?
discrim <- vector()
i = 1
for (d in years){
sub <- df %>% subset(year == d)
# Train test split (80-20%)
#train.index <- createDataPartition(sub$Gender, p = 0.8, list = FALSE)
#train <- sub[train.index,]
#test <- sub[-train.index,]
#qda_fit <- qda(is_female ~ f1 + f2 + f3 + f4, train)
#pred <- predict(qda_fit, test)
#accuracy <- mean(pred$class == test$is_female)
ctrl <- trainControl(method = "cv",
p = 1,
number = 5
)
mod <- train(is_female ~ f1+f2+f3+f4,
data = sub,
method = "rf",
trControl = ctrl)
discrim[i] <- max(mod$results$Accuracy)
i = i+ 1
}
discrim_df <- data.frame(discrim = discrim,
year = years)
# Take a look at the results
px <- ggplot(discrim_df, aes(year, discrim))+
geom_point()+
geom_smooth(se = FALSE, method = "loess", size = 2)+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
# Use this function again, from https://rpubs.com/mengxu/loess_cv
loess_wrapper_extrapolate <- function (x, y, span.vals = seq(0.1, 1, by = 0.05), folds = 5){
# Do model selection using mean absolute error, which is more robust than squared error.
mean.abs.error <- numeric(length(span.vals))
# Quantify error for each span, using CV
loess.model <- function(x, y, span){
loess(y ~ x, span = span, control=loess.control(surface="direct"))
}
loess.predict <- function(fit, newdata) {
predict(fit, newdata = newdata)
}
span.index <- 0
for (each.span in span.vals) {
span.index <- span.index + 1
y.hat.cv <- crossval(x, y, theta.fit = loess.model, theta.predict = loess.predict, span = each.span, ngroup = folds)$cv.fit
non.empty.indices <- !is.na(y.hat.cv)
mean.abs.error[span.index] <- mean(abs(y[non.empty.indices] - y.hat.cv[non.empty.indices]))
}
# find the span which minimizes error
best.span <- span.vals[which.min(mean.abs.error)]
# fit and return the best model
best.model <- loess(y ~ x, span = best.span, control=loess.control(surface="direct"))
print(paste0("Best span = ", best.span))
return(best.model)
}
model.cv <- loess_wrapper_extrapolate(discrim_df$year,discrim_df$discrim)
discrim_df$smooth <- model.cv$fitted
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
# Use this function again, from https://rpubs.com/mengxu/loess_cv
loess_wrapper_extrapolate <- function (x, y, span.vals = seq(0.1, 1, by = 0.05), folds = 5){
# Do model selection using mean absolute error, which is more robust than squared error.
mean.abs.error <- numeric(length(span.vals))
# Quantify error for each span, using CV
loess.model <- function(x, y, span){
loess(y ~ x, span = span, control=loess.control(surface="direct"))
}
loess.predict <- function(fit, newdata) {
predict(fit, newdata = newdata)
}
span.index <- 0
for (each.span in span.vals) {
span.index <- span.index + 1
y.hat.cv <- crossval(x, y, theta.fit = loess.model, theta.predict = loess.predict, span = each.span, ngroup = folds)$cv.fit
non.empty.indices <- !is.na(y.hat.cv)
mean.abs.error[span.index] <- mean(abs(y[non.empty.indices] - y.hat.cv[non.empty.indices]))
}
# find the span which minimizes error
best.span <- span.vals[which.min(mean.abs.error)]
# fit and return the best model
best.model <- loess(y ~ x, span = best.span, control=loess.control(surface="direct"))
print(paste0("Best span = ", best.span))
return(best.model)
}
model.cv <- loess_wrapper_extrapolate(discrim_df$year,discrim_df$discrim)
discrim_df$smooth <- model.cv$fitted
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
write.csv(discrim_df, "Discriminability_by_year.csv", row.names = FALSE)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
discrim_df$smotoh <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
discrim_df$smotoh <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.1)
discrim_df$smotoh <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
discrim_df$smooth <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
discrim_df$smooth <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.3)
discrim_df$smooth <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.4)
discrim_df$smooth <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
discrim_df$smooth <- predict(loessmod50)
# Plot the smoothed data
# Take a look at the results
px <- ggplot(discrim_df, aes(year, smooth))+
geom_line()+
xlab("Decade")+
ylab("Male-female discriminability")+
scale_x_continuous(breaks = seq(1930,2010, by = 10))+
theme_bw()+
scale_y_continuous(labels = scales::percent_format(accuracy = 1))+
theme(axis.title = element_text(size = 24),
axis.text = element_text(size = 16))
px
###############################################################################
################## SMOOTHING ##################################################
# Identify the ideal span of the loess smoother using cross-validation #######
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
discrim_df$smooth <- predict(loessmod50)
write.csv(discrim_df, "Discriminability_by_year.csv", row.names = FALSE)
# Plot hair density
library(ggplot2)
library(dplyr)
library(bootstrap)
rm(list = ls())
# Set a random seed
set.seed(20)
# Load in male and female hair density measures
df_f <- read.csv("hair_f_density.csv")
df_f$Gender = "Female"
df_m <- read.csv("hair_m_density.csv")
df_m$Gender = "Male"
df <- rbind(df_f, df_m)
# Just care about 1930 on
df <- subset(df, year >= 1930)
# For each year get the median hair density
df_sum <- df %>%
group_by(Gender, year) %>%
summarise(med = median(density))
# Determine the right amount of smoothing via cross validation
loess_wrapper_extrapolate <- function (x, y, span.vals = seq(0.1, 1, by = 0.05), folds = 5){
# Do model selection using mean absolute error, which is more robust than squared error.
mean.abs.error <- numeric(length(span.vals))
# Quantify error for each span, using CV
loess.model <- function(x, y, span){
loess(y ~ x, span = span, control=loess.control(surface="direct"))
}
loess.predict <- function(fit, newdata) {
predict(fit, newdata = newdata)
}
span.index <- 0
for (each.span in span.vals) {
span.index <- span.index + 1
y.hat.cv <- crossval(x, y, theta.fit = loess.model, theta.predict = loess.predict, span = each.span, ngroup = folds)$cv.fit
non.empty.indices <- !is.na(y.hat.cv)
mean.abs.error[span.index] <- mean(abs(y[non.empty.indices] - y.hat.cv[non.empty.indices]))
}
# find the span which minimizes error
best.span <- span.vals[which.min(mean.abs.error)]
# fit and return the best model
best.model <- loess(y ~ x, span = best.span, control=loess.control(surface="direct"))
print(paste0("Best span = ", best.span))
return(best.model)
}
x = unique(df_sum$year)
f_hair <- subset(df_sum, Gender == "Female")
m_hair <- subset(df_sum, Gender == "Male")
model.f <- loess_wrapper_extrapolate(x,f_hair$med)
model.m <- loess_wrapper_extrapolate(x,m_hair$med)
##### Write out the data frames of smoothed hair size
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
f_hair$smoothed <- loessmod50
m_hair$smoothed <- loessmod50
write.csv(f_hair, "trend_f_smoothed.csv", row.names = FALSE)
write.csv(m_hair, "trend_m_smoothed.csv", row.names = FALSE)
# Make a plot for sanity
allhair <- rbind(f_hair, m_hair)
ggplot(allhair, aes(year, smoothed))+
geom_line(aes(group = Gender, colour = Gender))
setwd("../Size_by_Year")
# Plot hair density
library(ggplot2)
library(dplyr)
library(bootstrap)
rm(list = ls())
# Set a random seed
set.seed(20)
# Load in male and female hair density measures
df_f <- read.csv("hair_f_density.csv")
df_f$Gender = "Female"
df_m <- read.csv("hair_m_density.csv")
df_m$Gender = "Male"
df <- rbind(df_f, df_m)
# Just care about 1930 on
df <- subset(df, year >= 1930)
# For each year get the median hair density
df_sum <- df %>%
group_by(Gender, year) %>%
summarise(med = median(density))
# Determine the right amount of smoothing via cross validation
loess_wrapper_extrapolate <- function (x, y, span.vals = seq(0.1, 1, by = 0.05), folds = 5){
# Do model selection using mean absolute error, which is more robust than squared error.
mean.abs.error <- numeric(length(span.vals))
# Quantify error for each span, using CV
loess.model <- function(x, y, span){
loess(y ~ x, span = span, control=loess.control(surface="direct"))
}
loess.predict <- function(fit, newdata) {
predict(fit, newdata = newdata)
}
span.index <- 0
for (each.span in span.vals) {
span.index <- span.index + 1
y.hat.cv <- crossval(x, y, theta.fit = loess.model, theta.predict = loess.predict, span = each.span, ngroup = folds)$cv.fit
non.empty.indices <- !is.na(y.hat.cv)
mean.abs.error[span.index] <- mean(abs(y[non.empty.indices] - y.hat.cv[non.empty.indices]))
}
# find the span which minimizes error
best.span <- span.vals[which.min(mean.abs.error)]
# fit and return the best model
best.model <- loess(y ~ x, span = best.span, control=loess.control(surface="direct"))
print(paste0("Best span = ", best.span))
return(best.model)
}
x = unique(df_sum$year)
f_hair <- subset(df_sum, Gender == "Female")
m_hair <- subset(df_sum, Gender == "Male")
model.f <- loess_wrapper_extrapolate(x,f_hair$med)
model.m <- loess_wrapper_extrapolate(x,m_hair$med)
##### Write out the data frames of smoothed hair size
loessmod50 <- loess(discrim ~ year, data = discrim_df, span = 0.5)
f_hair$smoothed <- loessmod50
m_hair$smoothed <- loessmod50
write.csv(f_hair, "trend_f_smoothed.csv", row.names = FALSE)
write.csv(m_hair, "trend_m_smoothed.csv", row.names = FALSE)
# Make a plot for sanity
allhair <- rbind(f_hair, m_hair)
ggplot(allhair, aes(year, smoothed))+
geom_line(aes(group = Gender, colour = Gender))
source('~/Image/Bigdata_Bighair/Size_by_Year/2_Analyze_Size_Trends.R', echo=TRUE)
##### Write out the data frames of smoothed hair size
loessmod50f <- loess(med ~ year, data = f_hair, span = 0.5)
loessmod50m <- loess(med ~ year, data = m_hair, span = 0.5)
# Plot hair density
library(ggplot2)
library(dplyr)
library(bootstrap)
rm(list = ls())
# Set a random seed
set.seed(20)
# Load in male and female hair density measures
df_f <- read.csv("hair_f_density.csv")
df_f$Gender = "Female"
df_m <- read.csv("hair_m_density.csv")
df_m$Gender = "Male"
df <- rbind(df_f, df_m)
# Just care about 1930 on
df <- subset(df, year >= 1930)
# For each year get the median hair density
df_sum <- df %>%
group_by(Gender, year) %>%
summarise(med = median(density))
# Determine the right amount of smoothing via cross validation
loess_wrapper_extrapolate <- function (x, y, span.vals = seq(0.1, 1, by = 0.05), folds = 5){
# Do model selection using mean absolute error, which is more robust than squared error.
mean.abs.error <- numeric(length(span.vals))
# Quantify error for each span, using CV
loess.model <- function(x, y, span){
loess(y ~ x, span = span, control=loess.control(surface="direct"))
}
loess.predict <- function(fit, newdata) {
predict(fit, newdata = newdata)
}
span.index <- 0
for (each.span in span.vals) {
span.index <- span.index + 1
y.hat.cv <- crossval(x, y, theta.fit = loess.model, theta.predict = loess.predict, span = each.span, ngroup = folds)$cv.fit
non.empty.indices <- !is.na(y.hat.cv)
mean.abs.error[span.index] <- mean(abs(y[non.empty.indices] - y.hat.cv[non.empty.indices]))
}
# find the span which minimizes error
best.span <- span.vals[which.min(mean.abs.error)]
# fit and return the best model
best.model <- loess(y ~ x, span = best.span, control=loess.control(surface="direct"))
print(paste0("Best span = ", best.span))
return(best.model)
}
x = unique(df_sum$year)
f_hair <- subset(df_sum, Gender == "Female")
m_hair <- subset(df_sum, Gender == "Male")
model.f <- loess_wrapper_extrapolate(x,f_hair$med)
model.m <- loess_wrapper_extrapolate(x,m_hair$med)
##### Write out the data frames of smoothed hair size
loessmod50f <- loess(med ~ year, data = f_hair, span = 0.5)
loessmod50m <- loess(med ~ year, data = m_hair, span = 0.5)
f_hair$smoothed <- predict(lossmod50f)
m_hair$smoothed <- predict(lossmod50m)
write.csv(f_hair, "trend_f_smoothed.csv", row.names = FALSE)
write.csv(m_hair, "trend_m_smoothed.csv", row.names = FALSE)
# Make a plot for sanity
allhair <- rbind(f_hair, m_hair)
ggplot(allhair, aes(year, smoothed))+
geom_line(aes(group = Gender, colour = Gender))
##### Write out the data frames of smoothed hair size
loessmod50f <- loess(med ~ year, data = f_hair, span = 0.5)
loessmod50m <- loess(med ~ year, data = m_hair, span = 0.5)
f_hair$smoothed <- predict(lossmod50f)
f_hair$smoothed <- predict(loessmod50f)
m_hair$smoothed <- predict(loessmod50m)
write.csv(f_hair, "trend_f_smoothed.csv", row.names = FALSE)
write.csv(m_hair, "trend_m_smoothed.csv", row.names = FALSE)
# Make a plot for sanity
allhair <- rbind(f_hair, m_hair)
ggplot(allhair, aes(year, smoothed))+
geom_line(aes(group = Gender, colour = Gender))
